:py:mod:`advent_of_code.visualization.protocols`
================================================

.. py:module:: advent_of_code.visualization.protocols


Module Contents
---------------

.. py:class:: AOCPygameVisualizer


   .. py:attribute:: title
      :type: str

      

   .. py:attribute:: simulation_size
      :type: tuple[int, int]

      

   .. py:attribute:: target_fps
      :type: int
      :value: 60

      

   .. py:attribute:: running_game_loop
      :type: bool
      :value: True

      

   .. py:attribute:: elapsed_frames
      :type: int
      :value: 0

      

   .. py:attribute:: update_simulation
      :type: bool
      :value: False

      

   .. py:attribute:: cell_width_in_px
      :type: int
      :value: 5

      

   .. py:attribute:: screen
      :type: pygame.SurfaceType

      

   .. py:attribute:: display_size
      :type: tuple[int, int]

      

   .. py:method:: init_state() -> None
      :abstractmethod:


   .. py:method:: update_state() -> None
      :abstractmethod:


   .. py:method:: update_surfaces() -> None
      :abstractmethod:


   .. py:method:: consume_event(event: pygame.Event) -> None
      :abstractmethod:


   .. py:method:: consume_event_loop()


   .. py:method:: init()


   .. py:method:: start()



.. py:class:: AOCPygameVisualizerFactory


   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing).

   For example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto[T](Protocol):
           def meth(self) -> T:
               ...

   .. py:method:: create_visualizer() -> AOCPygameVisualizer
      :abstractmethod:



