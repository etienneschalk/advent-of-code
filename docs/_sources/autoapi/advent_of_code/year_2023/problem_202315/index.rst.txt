:py:mod:`advent_of_code.year_2023.problem_202315`
=================================================

.. py:module:: advent_of_code.year_2023.problem_202315


Module Contents
---------------

.. py:class:: AdventOfCodeProblem202315


   Bases: :py:obj:`advent_of_code.common.protocols.AdventOfCodeProblem`\ [\ :py:obj:`PuzzleInput`\ ]

   Base class for Advent of Code problems' implementations

   .. py:attribute:: year
      :type: int
      :value: 2023

      

   .. py:attribute:: day
      :type: int
      :value: 15

      

   .. py:method:: solve_part_1(puzzle_input: PuzzleInput)


   .. py:method:: solve_part_2(puzzle_input: PuzzleInput)


   .. py:method:: parse_text_input(text: str) -> PuzzleInput
      :staticmethod:



.. py:function:: hashmap_process(initialization_sequence: PuzzleInput) -> dict[int, dict[str, int]]


.. py:function:: add_up_focusing_power(boxes: dict[int, dict[str, int]]) -> int


.. py:function:: render_step(boxes: dict[int, dict[str, int]], step: str) -> str


.. py:function:: render_box(box: dict[str, int]) -> str


.. py:function:: hash_problem_202315_imperative(string: str)


.. py:function:: hash_problem_202315(string: str)


.. py:function:: parse_input_text_file() -> PuzzleInput


.. py:function:: parse_text_input(text: str) -> PuzzleInput


